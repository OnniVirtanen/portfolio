{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\35840\\\\source\\\\new_website_ov\\\\personal-website\\\\src\\\\Components\\\\Projects.js\";\nimport \"../Styles/projects.css\";\nimport image_git from \"../Images/github-mark-white.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Projects = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"projects\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Projects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"projects-flex-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"projects-flex-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"projects-flex-item-header-and-git\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Encryption tool\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 12,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"git-image\",\n              src: image_git\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 13,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"I have made a file encryption tool in Python. It is run through CLI. It uses a tag to check the file's authenticity. I also built nonce to it so even if the key and file was same, the cipher would be unique every time. I wanted to try a real world problem in this project.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tech-used\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Python\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 21,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"pycryptodome\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 24,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"projects-flex-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"projects-flex-item-header-and-git\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Country API\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"git-image\",\n              src: image_git\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"A program that fetches data from an API. It sorts the data an displays it to user. User input will determine what country is shown. This is my implementation of an exercise from the Full Stack Open 2022 course.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tech-used\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"React\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Axios\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"projects-flex-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"projects-flex-item-header-and-git\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Encryption tool\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"git-image\",\n              src: image_git\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"I have made a file encryption tool in Python. It is run through CLI. It uses a tag to check the file's authenticity. I also built nonce to it so even if the key and file was same, the cipher would be unique every time. I wanted to try a real world problem in this project.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tech-used\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Python\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"pycryptodome\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["image_git","Projects"],"sources":["C:/Users/35840/source/new_website_ov/personal-website/src/Components/Projects.js"],"sourcesContent":["import \"../Styles/projects.css\";\r\nimport image_git from \"../Images/github-mark-white.svg\";\r\n\r\nconst Projects = () => {\r\n    return (\r\n        <div className='container'>\r\n            <div className='projects'>\r\n                <h2>Projects</h2>\r\n                <div className='projects-flex-container'>\r\n                    <div className='projects-flex-item'>\r\n                        <div className='projects-flex-item-header-and-git'>\r\n                            <h3>Encryption tool</h3>\r\n                            <img className='git-image' src={image_git}/>\r\n                        </div>\r\n                        <p>I have made a file encryption tool in Python. It is run through CLI. It uses a tag to check the file's authenticity. \r\n                            I also built nonce to it so even if the key and file was same, the cipher would be unique every time.\r\n                            I wanted to try a real world problem in this project.\r\n                        </p>\r\n                        <div className='tech-used'>\r\n                            <ul>\r\n                                <li>\r\n                                    Python\r\n                                </li>\r\n                                <li>\r\n                                    pycryptodome\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className='projects-flex-item'>\r\n                        <div className='projects-flex-item-header-and-git'>\r\n                            <h3>Country API</h3>\r\n                            <img className='git-image' src={image_git}/>\r\n                        </div>\r\n                        <p>A program that fetches data from an API. It sorts the data an displays it to user. \r\n                            User input will determine what country is shown. \r\n                            This is my implementation of an exercise from the Full Stack Open 2022 course.\r\n                        </p>\r\n                        <div className='tech-used'>\r\n                            <ul>\r\n                                <li>\r\n                                    React\r\n                                </li>\r\n                                <li>\r\n                                    Axios\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className='projects-flex-item'>\r\n                        <div className='projects-flex-item-header-and-git'>\r\n                            <h3>Encryption tool</h3>\r\n                            <img className='git-image' src={image_git}/>\r\n                        </div>\r\n                        <p>I have made a file encryption tool in Python. It is run through CLI. It uses a tag to check the file's authenticity. \r\n                            I also built nonce to it so even if the key and file was same, the cipher would be unique every time.\r\n                            I wanted to try a real world problem in this project.\r\n                        </p>\r\n                        <div className='tech-used'>\r\n                            <ul>\r\n                                <li>\r\n                                    Python\r\n                                </li>\r\n                                <li>\r\n                                    pycryptodome\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Projects;"],"mappings":";AAAA,OAAO,wBAAwB;AAC/B,OAAOA,SAAS,MAAM,iCAAiC;AAAC;AAExD,MAAMC,QAAQ,GAAG,MAAM;EACnB,oBACI;IAAK,SAAS,EAAC,WAAW;IAAA,uBACtB;MAAK,SAAS,EAAC,UAAU;MAAA,wBACrB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiB,eACjB;QAAK,SAAS,EAAC,yBAAyB;QAAA,wBACpC;UAAK,SAAS,EAAC,oBAAoB;UAAA,wBAC/B;YAAK,SAAS,EAAC,mCAAmC;YAAA,wBAC9C;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAAwB,eACxB;cAAK,SAAS,EAAC,WAAW;cAAC,GAAG,EAAED;YAAU;cAAA;cAAA;cAAA;YAAA,QAAE;UAAA;YAAA;YAAA;YAAA;UAAA,QAC1C,eACN;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAGI,eACJ;YAAK,SAAS,EAAC,WAAW;YAAA,uBACtB;cAAA,wBACI;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAEK,eACL;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAEK;YAAA;cAAA;cAAA;cAAA;YAAA;UACJ;YAAA;YAAA;YAAA;UAAA,QACH;QAAA;UAAA;UAAA;UAAA;QAAA,QACJ,eACN;UAAK,SAAS,EAAC,oBAAoB;UAAA,wBAC/B;YAAK,SAAS,EAAC,mCAAmC;YAAA,wBAC9C;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAAoB,eACpB;cAAK,SAAS,EAAC,WAAW;cAAC,GAAG,EAAEA;YAAU;cAAA;cAAA;cAAA;YAAA,QAAE;UAAA;YAAA;YAAA;YAAA;UAAA,QAC1C,eACN;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAGI,eACJ;YAAK,SAAS,EAAC,WAAW;YAAA,uBACtB;cAAA,wBACI;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAEK,eACL;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAEK;YAAA;cAAA;cAAA;cAAA;YAAA;UACJ;YAAA;YAAA;YAAA;UAAA,QACH;QAAA;UAAA;UAAA;UAAA;QAAA,QACJ,eACN;UAAK,SAAS,EAAC,oBAAoB;UAAA,wBAC/B;YAAK,SAAS,EAAC,mCAAmC;YAAA,wBAC9C;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAAwB,eACxB;cAAK,SAAS,EAAC,WAAW;cAAC,GAAG,EAAEA;YAAU;cAAA;cAAA;cAAA;YAAA,QAAE;UAAA;YAAA;YAAA;YAAA;UAAA,QAC1C,eACN;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAGI,eACJ;YAAK,SAAS,EAAC,WAAW;YAAA,uBACtB;cAAA,wBACI;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAEK,eACL;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAEK;YAAA;cAAA;cAAA;cAAA;YAAA;UACJ;YAAA;YAAA;YAAA;UAAA,QACH;QAAA;UAAA;UAAA;UAAA;QAAA,QACJ;MAAA;QAAA;QAAA;QAAA;MAAA,QACJ;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QACJ;AAEd,CAAC;AAAA,KAtEKC,QAAQ;AAwEd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}